@model testRA.WebApp.Models.ViewModels.CandidateExperienceViewModel

@{
    ViewData["Title"] = "Create Candidate Experience";
   
}

<h1>@ViewData["Title"]</h1>

<h4>CandidateExperience</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="IdCandidate" class="control-label"></label>
                <select asp-for="IdCandidate" class="form-control" asp-items="ViewBag.IdCandidate" >
                   
                </select>
            </div>
            <div class="form-group">
                <label asp-for="Company" class="control-label"></label>
                <input asp-for="Company" class="form-control" />
                <span asp-validation-for="Company" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Job" class="control-label"></label>
                <input asp-for="Job" class="form-control" />
                <span asp-validation-for="Job" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Salary" class="control-label"></label>
                <input asp-for="Salary" class="form-control" />
                <span asp-validation-for="Salary" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BeginDate" class="control-label"></label>
                <input type ="date" asp-for="BeginDate" class="form-control" />
                <span asp-validation-for="BeginDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndDate" class="control-label"></label>
                <input type ="date" asp-for="EndDate" class="form-control" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>
            <hr />
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        };
        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        };
        $.validator.methods.date = function dateIsValid(dateStr) {
            const regex = /^\d{2}\/\d{2}\/\d{4}$/;

            if (dateStr.match(regex) === null) {
                return false;
            }

            const [day, month, year] = dateStr.split('/');
            const isoFormattedStr = `${year}-${month}-${day}`;
            const date = new Date(isoFormattedStr);
            const timestamp = date.getTime();

            if (typeof timestamp !== 'number' || Number.isNaN(timestamp)) {
                return false;
            }

            return date.toISOString().startsWith(isoFormattedStr);
        };

    </script>
}
